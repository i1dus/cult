syntax = "proto3";

package api;

option go_package = "internal/pb/parking_lot;parking_lot";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

service ParkingAPI {
  // Получение парковочного места по его числу
  rpc GetParkingLot (GetParkingLotRequest) returns (GetParkingLotResponse) {
    option (google.api.http) = {
      get: "/parking/get"
    };
  };

  // Получение парковочного места по client id (owner id)
  rpc GetParkingLotsByUserID (GetParkingLotsByUserIDRequest) returns (GetParkingLotsByUserIDResponse) {
    option (google.api.http) = {
      get: "/parking/get_by_user_id"
    };
  };

  // Получение всех парковочных мест для отрисовки карты
  rpc ListParkingLots (ListParkingLotsRequest) returns (ListParkingLotsResponse) {
    option (google.api.http) = {
      get: "/parking/list"
    };
  };
  rpc AddParkingBooking (AddParkingBookingRequest) returns (AddParkingBookingResponse) {
    option (google.api.http) = {
      post: "/booking/add"
      body: "*"
    };
  }

  rpc GetParkingBooking (GetParkingBookingRequest) returns (GetParkingBookingResponse) {
    option (google.api.http) = {
      get: "/booking/get"
    };
  }

  rpc GetParkingBookingsList (GetParkingBookingsListRequest) returns (GetParkingBookingsListResponse) {
    option (google.api.http) = {
      get: "/booking/list"
    };
  }

  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/sso/register"
      body: "*"
    };
  };

  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/sso/login"
      body: "*"
    };
  };

  rpc GetUserByID (GetUserByIDRequest) returns (GetUserByIDResponse) {
    option (google.api.http) = {
      get: "/user/get"
    };
  };

  rpc GetUserByPhoneNumber (GetUserByPhoneNumberRequest) returns (GetUserByPhoneNumberResponse) {
    option (google.api.http) = {
      get: "/user/get_by_phone"
    };
  };

  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      post: "/user/update"
      body: "*"
    };
  };

  rpc UpdateParkingLot (UpdateParkingLotRequest) returns (UpdateParkingLotResponse) {
    option (google.api.http) = {
      post: "/parking/update"
      body: "*"
    };
  };

  rpc AddRental (AddRentalRequest) returns (AddRentalResponse) {
    option (google.api.http) = {
      post: "/rental/add"
      body: "*"
    };
  }

  rpc GetMyParkingLots (GetMyParkingLotsRequest) returns (GetMyParkingLotsResponse) {
    option (google.api.http) = {
      get: "/my/parking/list"
    };
  }
}


service PaymentAPI {
  // Create a payment for a booking
  rpc CreatePayment (CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) = {
      post: "/payment/create"
      body: "*"
    };
  };

  // Get payment status
  rpc GetPaymentStatus (GetPaymentStatusRequest) returns (GetPaymentStatusResponse) {
    option (google.api.http) = {
      get: "/payment/status"
    };
  };

  // Process payment callback from payment provider
  rpc PaymentCallback (PaymentCallbackRequest) returns (PaymentCallbackResponse) {
    option (google.api.http) = {
      post: "/payment/callback"
      body: "*"
    };
  };

  // Get payment history for user
  rpc GetPaymentHistory (GetPaymentHistoryRequest) returns (GetPaymentHistoryResponse) {
    option (google.api.http) = {
      get: "/payment/history"
    };
  };

  // Refund payment
  rpc RefundPayment (RefundPaymentRequest) returns (RefundPaymentResponse) {
    option (google.api.http) = {
      post: "/payment/refund"
      body: "*"
    };
  };
}

// Payment messages
message CreatePaymentRequest {
  string user_id = 1 [(google.api.field_behavior) = REQUIRED];
  oneof payment_type {
    string booking_id = 2;  // For parking bookings
    string rental_id = 3;   // For rentals
  }
  PaymentMethod payment_method = 4 [(google.api.field_behavior) = REQUIRED];
}

message CreatePaymentResponse {
  string payment_id = 1;
  string payment_url = 2;  // For redirect to payment provider
  PaymentStatus status = 3;
}

message GetPaymentStatusRequest {
  string payment_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetPaymentStatusResponse {
  PaymentStatus status = 1;
  google.protobuf.Timestamp payment_date = 2;
  int64 amount = 3;
  string currency = 4;
}

message PaymentCallbackRequest {
  string payment_id = 1;
  string external_id = 2;
  PaymentStatus status = 3;
  string signature = 4;  // For verification
}

message PaymentCallbackResponse {
  bool success = 1;
}

message GetPaymentHistoryRequest {
  string user_id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
  int32 limit = 4;
  int32 offset = 5;
}

message GetPaymentHistoryResponse {
  repeated PaymentHistoryItem payments = 1;
  int32 total = 2;
}

message RefundPaymentRequest {
  string payment_id = 1 [(google.api.field_behavior) = REQUIRED];
  string reason = 2;
}

message RefundPaymentResponse {
  string refund_id = 1;
  PaymentStatus status = 2;
}

// Payment data structures
message PaymentHistoryItem {
  string payment_id = 1;
  int64 amount = 2;
  string currency = 3;
  PaymentStatus status = 4;
  google.protobuf.Timestamp created_at = 5;
  oneof payment_type {
    string booking_id = 6;
    string rental_id = 7;
  }
  PaymentMethod payment_method = 8;
}

enum PaymentMethod {
  UNDEFINED_PAYMENT_METHOD = 0;
  CREDIT_CARD = 1;
  BANK_TRANSFER = 2;
  MOBILE_PAYMENT = 3;
  ELECTRONIC_WALLET = 4;
}

enum PaymentStatus {
  UNDEFINED_PAYMENT_STATUS = 0;
  PENDING = 1;
  PROCESSING = 2;
  COMPLETED = 3;
  FAILED = 4;
  REFUNDED = 5;
  PARTIALLY_REFUNDED = 6;
  CANCELLED = 7;
}


message AddRentalRequest {
  Rental rental = 1;
}

message AddRentalResponse {
  int64 parking_lot_id = 1;
}

message GetMyParkingLotsRequest {
  Filter filter = 1;
}

message GetMyParkingLotsResponse {
  repeated ParkingBooking bookings = 1;
  repeated Rental rentals = 2;
  repeated ParkingLot parking_lots = 3;
  int64 total = 5;
}

message GetUserByIDRequest {
  string user_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetUserByIDResponse {
  User user = 1;
}

message GetUserByPhoneNumberRequest {
  string phone_number = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetUserByPhoneNumberResponse {
  User user = 1;
}

message RegisterRequest {
  // Номер телефона
  string phone_number = 1;
  // Пароль
  string password = 2;
}

message RegisterResponse {
  // ID пользователя в формате UUID
  string user_id = 1;
}

message LoginRequest {
  // Номер телефона
  string phone_number = 1;
  // Пароль
  string password = 2;
}

message LoginResponse {
  // Авторизационный токен
  string token = 1;
  // ID пользователя в виде UUID
  string userID = 2;
}

message IsAdminRequest {
  // ID пользователя в формате UUID
  string user_id = 1;
}

message IsAdminResponse {
  bool is_admin = 1;
}


message GetParkingLotRequest {
  int64 number = 1;
  string user_id = 2;
}

message GetParkingLotResponse {
  ParkingLot parking_lot = 1;
}

message GetParkingLotsByUserIDRequest {
  string user_id = 1;
}

message GetParkingLotsByUserIDResponse {
  repeated ParkingLot parking_lot = 1;
}

message ListParkingLotsRequest {
  string user_id = 1;
}

message ListParkingLotsResponse {
  repeated ParkingLot parking_lot = 1;
  int64 total = 2;
}

message ParkingLot {
  // Номер парковочного места
  int64 number = 1;
  // Вид парковочного места (обычное, спец., ОВЗ)
  ParkingKind kind = 2;
  // Занятость парковочного места
  ParkingType type = 3;
  // Статус парковочного места
  ParkingLotStatus status = 4;
  // Гос. номер машины на парковочном месте
  optional string vehicle = 5;
  // Владелец парковочного места
  optional string owner_id = 6;
}

enum ParkingKind {
  UNDEFINED_PARKING_KIND = 0;
  REGULAR_PARKING_KIND = 1;
  SPECIAL_PARKING_KIND = 2;
  INCLUSIVE_PARKING_KIND = 3;
}

enum ParkingLotStatus {
  UNDEFINED_PARKING_LOT_STATUS = 0;
  FREE_PARKING_LOT_STATUS = 1;
  BUSY_PARKING_LOT_STATUS = 2;
  MINE_PARKING_LOT_STATUS = 3;
  EXPIRED_PARKING_LOT_STATUS = 4;
}

enum ParkingType {
  UNDEFINED_PARKING_TYPE = 0;
  OWNED_PARKING_TYPE = 1;
  LONG_TERM_RENT_BY_ME_PARKING_TYPE = 2;
  SHORT_TERM_RENT_BY_ME_PARKING_TYPE = 3;
  LONG_TERM_RENT_BY_OTHER_PARKING_TYPE = 4;
  SHORT_TERM_RENT_BY_OTHER_PARKING_TYPE = 5;
}

message User {
  // UUID
  string id = 1;
  // Имя
  optional string name = 2;
  // Фамилия
  optional string surname = 3;
  // Отчество
  optional string patronymic = 4;
  string phone_number = 5;
  optional string address = 6;
  // Тип пользователя
  UserType user_type = 7;
}

enum UserType {
  // Неизвестный
  UNDEFINED_USER_TYPE = 0;
  // Обычный пользователь (Владелец+Арендатор)
  REGULAR_USER_TYPE = 1;
  // Управляющая компания
  MANAGING_COMPANY_USER_TYPE = 2;
  // Администратор
  ADMINISTRATOR_USER_TYPE = 3;
}

message Vehicle {
  // UUID
  string id = 1;
  // Гос. номер машины
  string number = 2;
  // ID владельца машины
  string user_id = 3;
}

message ParkingBooking {
  string user_id = 1;
  int64 parking_lot = 2;
  string vehicle = 3  [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp time_from = 4  [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp time_to = 5  [(google.api.field_behavior) = REQUIRED];
}

message AddParkingBookingRequest {
  ParkingBooking booking = 1 [(google.api.field_behavior) = REQUIRED];
}

message AddParkingBookingResponse {
  int64 parking_lot = 1;
}

message GetParkingBookingRequest {
  int64 parking_lot = 1;
}

message GetParkingBookingResponse {
  ParkingBooking booking = 1;
}

message GetParkingBookingsListRequest {
  Filter filter = 1;
  int64 limit = 2; // opt
  int64 offset = 3; // opt
}

message Filter {
  string owner_id = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp time_from = 2 ;
  google.protobuf.Timestamp time_to = 3;
  repeated string vehicles = 4;
}

message GetParkingBookingsListResponse {
  repeated ParkingBooking bookings = 1;
  int64 total = 2;
}

message UpdateUserRequest {
  // UUID клиента у которого изменить данные
  string id = 1;
  // Имя
  optional string name = 2;
  // Фамилия
  optional string surname = 3;
  // Отчество
  optional string patronymic = 4;
  optional string phone_number = 5;
  optional string address = 6;
}

message UpdateUserResponse {}

message UpdateParkingLotRequest {
  int64 number = 1;
  // Тип парковочного места: обычное, для лиц с ОВЗ, спец. назначения
  optional ParkingKind kind = 2;
  // Владелец парковочного места. UUID
  optional string owner_id = 3;
  // Гос. номер Т/С
  optional string owner_vehicle = 4;
}

message UpdateParkingLotResponse {}

message Rental {
  string rental_id = 1;
  int64 parking_lot = 2;
  google.protobuf.Timestamp time_from = 4  [(google.api.field_behavior) = REQUIRED];
  google.protobuf.Timestamp time_to = 5  [(google.api.field_behavior) = REQUIRED];
  int64 cost_per_hour = 6;
  int64 cost_per_day = 7;
}





