{
  "swagger": "2.0",
  "info": {
    "title": "parking_lot.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ParkingAPI"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/parking/get": {
      "get": {
        "operationId": "ParkingAPI_GetParkingLot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetParkingLotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ParkingAPI"
        ]
      }
    },
    "/parking/list/get": {
      "get": {
        "operationId": "ParkingAPI_ListParkingLots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListParkingLotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ParkingAPI"
        ]
      }
    }
  },
  "definitions": {
    "apiGetParkingLotResponse": {
      "type": "object",
      "properties": {
        "parkingLot": {
          "$ref": "#/definitions/apiParkingLot"
        }
      }
    },
    "apiListParkingLotsResponse": {
      "type": "object",
      "properties": {
        "parkingLot": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/apiParkingLot"
          }
        },
        "total": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "apiParkingLot": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/apiParkingType"
        },
        "status": {
          "$ref": "#/definitions/apiParkingLotStatus"
        },
        "vehicle": {
          "$ref": "#/definitions/apiVehicle"
        }
      }
    },
    "apiParkingLotStatus": {
      "type": "string",
      "enum": [
        "AVAILABLE",
        "BOOKED",
        "BOOKED_BY_ME"
      ],
      "default": "AVAILABLE"
    },
    "apiParkingType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "PERMANENT",
        "RENT",
        "SPECIAL",
        "INCLUSIVE"
      ],
      "default": "UNDEFINED",
      "description": "etc",
      "title": "- UNDEFINED: Неизвестный тип парковочного места\n - PERMANENT: Тип постоянного парковочного места\n - RENT: Тип временного парковочного места\n - SPECIAL: Тип парковочного места для спец. назначения (скорая, пожарные и т.д.)\n - INCLUSIVE: Тип парковочного места для инвалидов"
    },
    "apiVehicle": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "UUID"
        },
        "number": {
          "type": "string",
          "title": "Гос. номер машины"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
