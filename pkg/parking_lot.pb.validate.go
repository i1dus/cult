// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: parking_lot.proto

package parking_lot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetParkingLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingLotRequestMultiError, or nil if none found.
func (m *GetParkingLotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return GetParkingLotRequestMultiError(errors)
	}

	return nil
}

// GetParkingLotRequestMultiError is an error wrapping multiple validation
// errors returned by GetParkingLotRequest.ValidateAll() if the designated
// constraints aren't met.
type GetParkingLotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotRequestMultiError) AllErrors() []error { return m }

// GetParkingLotRequestValidationError is the validation error returned by
// GetParkingLotRequest.Validate if the designated constraints aren't met.
type GetParkingLotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotRequestValidationError) ErrorName() string {
	return "GetParkingLotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotRequestValidationError{}

// Validate checks the field values on GetParkingLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingLotResponseMultiError, or nil if none found.
func (m *GetParkingLotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParkingLot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParkingLotResponseValidationError{
					field:  "ParkingLot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParkingLotResponseValidationError{
					field:  "ParkingLot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParkingLot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParkingLotResponseValidationError{
				field:  "ParkingLot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParkingLotResponseMultiError(errors)
	}

	return nil
}

// GetParkingLotResponseMultiError is an error wrapping multiple validation
// errors returned by GetParkingLotResponse.ValidateAll() if the designated
// constraints aren't met.
type GetParkingLotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotResponseMultiError) AllErrors() []error { return m }

// GetParkingLotResponseValidationError is the validation error returned by
// GetParkingLotResponse.Validate if the designated constraints aren't met.
type GetParkingLotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotResponseValidationError) ErrorName() string {
	return "GetParkingLotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotResponseValidationError{}

// Validate checks the field values on ListParkingLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParkingLotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParkingLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParkingLotsRequestMultiError, or nil if none found.
func (m *ListParkingLotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParkingLotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PerPage

	if len(errors) > 0 {
		return ListParkingLotsRequestMultiError(errors)
	}

	return nil
}

// ListParkingLotsRequestMultiError is an error wrapping multiple validation
// errors returned by ListParkingLotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListParkingLotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParkingLotsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParkingLotsRequestMultiError) AllErrors() []error { return m }

// ListParkingLotsRequestValidationError is the validation error returned by
// ListParkingLotsRequest.Validate if the designated constraints aren't met.
type ListParkingLotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParkingLotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParkingLotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParkingLotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParkingLotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParkingLotsRequestValidationError) ErrorName() string {
	return "ListParkingLotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListParkingLotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParkingLotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParkingLotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParkingLotsRequestValidationError{}

// Validate checks the field values on ListParkingLotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParkingLotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParkingLotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParkingLotsResponseMultiError, or nil if none found.
func (m *ListParkingLotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParkingLotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParkingLot() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListParkingLotsResponseValidationError{
					field:  fmt.Sprintf("ParkingLot[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListParkingLotsResponseMultiError(errors)
	}

	return nil
}

// ListParkingLotsResponseMultiError is an error wrapping multiple validation
// errors returned by ListParkingLotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListParkingLotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParkingLotsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParkingLotsResponseMultiError) AllErrors() []error { return m }

// ListParkingLotsResponseValidationError is the validation error returned by
// ListParkingLotsResponse.Validate if the designated constraints aren't met.
type ListParkingLotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParkingLotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParkingLotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParkingLotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParkingLotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParkingLotsResponseValidationError) ErrorName() string {
	return "ListParkingLotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListParkingLotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParkingLotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParkingLotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParkingLotsResponseValidationError{}

// Validate checks the field values on ParkingLot with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParkingLot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParkingLot with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParkingLotMultiError, or
// nil if none found.
func (m *ParkingLot) ValidateAll() error {
	return m.validate(true)
}

func (m *ParkingLot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Type

	// no validation rules for Status

	if m.Vehicle != nil {

		if all {
			switch v := interface{}(m.GetVehicle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParkingLotValidationError{
						field:  "Vehicle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParkingLotValidationError{
						field:  "Vehicle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVehicle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParkingLotValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParkingLotMultiError(errors)
	}

	return nil
}

// ParkingLotMultiError is an error wrapping multiple validation errors
// returned by ParkingLot.ValidateAll() if the designated constraints aren't met.
type ParkingLotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParkingLotMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParkingLotMultiError) AllErrors() []error { return m }

// ParkingLotValidationError is the validation error returned by
// ParkingLot.Validate if the designated constraints aren't met.
type ParkingLotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParkingLotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParkingLotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParkingLotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParkingLotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParkingLotValidationError) ErrorName() string { return "ParkingLotValidationError" }

// Error satisfies the builtin error interface
func (e ParkingLotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParkingLot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParkingLotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParkingLotValidationError{}

// Validate checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Owner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OwnerMultiError, or nil if none found.
func (m *Owner) ValidateAll() error {
	return m.validate(true)
}

func (m *Owner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Surname

	// no validation rules for Apartment

	if len(errors) > 0 {
		return OwnerMultiError(errors)
	}

	return nil
}

// OwnerMultiError is an error wrapping multiple validation errors returned by
// Owner.ValidateAll() if the designated constraints aren't met.
type OwnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OwnerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OwnerMultiError) AllErrors() []error { return m }

// OwnerValidationError is the validation error returned by Owner.Validate if
// the designated constraints aren't met.
type OwnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OwnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OwnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OwnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OwnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OwnerValidationError) ErrorName() string { return "OwnerValidationError" }

// Error satisfies the builtin error interface
func (e OwnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOwner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OwnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OwnerValidationError{}

// Validate checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vehicle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VehicleMultiError, or nil if none found.
func (m *Vehicle) ValidateAll() error {
	return m.validate(true)
}

func (m *Vehicle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	if len(errors) > 0 {
		return VehicleMultiError(errors)
	}

	return nil
}

// VehicleMultiError is an error wrapping multiple validation errors returned
// by Vehicle.ValidateAll() if the designated constraints aren't met.
type VehicleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VehicleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VehicleMultiError) AllErrors() []error { return m }

// VehicleValidationError is the validation error returned by Vehicle.Validate
// if the designated constraints aren't met.
type VehicleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VehicleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VehicleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VehicleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VehicleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VehicleValidationError) ErrorName() string { return "VehicleValidationError" }

// Error satisfies the builtin error interface
func (e VehicleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVehicle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VehicleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VehicleValidationError{}
