// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: booking.proto

package parking_lot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookingAPI_AddParkingBooking_FullMethodName      = "/api.BookingAPI/AddParkingBooking"
	BookingAPI_GetParkingBooking_FullMethodName      = "/api.BookingAPI/GetParkingBooking"
	BookingAPI_GetParkingBookingsList_FullMethodName = "/api.BookingAPI/GetParkingBookingsList"
)

// BookingAPIClient is the client API for BookingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingAPIClient interface {
	AddParkingBooking(ctx context.Context, in *AddParkingBookingRequest, opts ...grpc.CallOption) (*AddParkingBookingResponse, error)
	GetParkingBooking(ctx context.Context, in *GetParkingBookingRequest, opts ...grpc.CallOption) (*GetParkingBookingResponse, error)
	GetParkingBookingsList(ctx context.Context, in *GetParkingBookingsListRequest, opts ...grpc.CallOption) (*GetParkingBookingsListResponse, error)
}

type bookingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingAPIClient(cc grpc.ClientConnInterface) BookingAPIClient {
	return &bookingAPIClient{cc}
}

func (c *bookingAPIClient) AddParkingBooking(ctx context.Context, in *AddParkingBookingRequest, opts ...grpc.CallOption) (*AddParkingBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddParkingBookingResponse)
	err := c.cc.Invoke(ctx, BookingAPI_AddParkingBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingAPIClient) GetParkingBooking(ctx context.Context, in *GetParkingBookingRequest, opts ...grpc.CallOption) (*GetParkingBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingBookingResponse)
	err := c.cc.Invoke(ctx, BookingAPI_GetParkingBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingAPIClient) GetParkingBookingsList(ctx context.Context, in *GetParkingBookingsListRequest, opts ...grpc.CallOption) (*GetParkingBookingsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingBookingsListResponse)
	err := c.cc.Invoke(ctx, BookingAPI_GetParkingBookingsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingAPIServer is the server API for BookingAPI service.
// All implementations must embed UnimplementedBookingAPIServer
// for forward compatibility.
type BookingAPIServer interface {
	AddParkingBooking(context.Context, *AddParkingBookingRequest) (*AddParkingBookingResponse, error)
	GetParkingBooking(context.Context, *GetParkingBookingRequest) (*GetParkingBookingResponse, error)
	GetParkingBookingsList(context.Context, *GetParkingBookingsListRequest) (*GetParkingBookingsListResponse, error)
	mustEmbedUnimplementedBookingAPIServer()
}

// UnimplementedBookingAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookingAPIServer struct{}

func (UnimplementedBookingAPIServer) AddParkingBooking(context.Context, *AddParkingBookingRequest) (*AddParkingBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParkingBooking not implemented")
}
func (UnimplementedBookingAPIServer) GetParkingBooking(context.Context, *GetParkingBookingRequest) (*GetParkingBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingBooking not implemented")
}
func (UnimplementedBookingAPIServer) GetParkingBookingsList(context.Context, *GetParkingBookingsListRequest) (*GetParkingBookingsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingBookingsList not implemented")
}
func (UnimplementedBookingAPIServer) mustEmbedUnimplementedBookingAPIServer() {}
func (UnimplementedBookingAPIServer) testEmbeddedByValue()                    {}

// UnsafeBookingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingAPIServer will
// result in compilation errors.
type UnsafeBookingAPIServer interface {
	mustEmbedUnimplementedBookingAPIServer()
}

func RegisterBookingAPIServer(s grpc.ServiceRegistrar, srv BookingAPIServer) {
	// If the following call pancis, it indicates UnimplementedBookingAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookingAPI_ServiceDesc, srv)
}

func _BookingAPI_AddParkingBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParkingBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingAPIServer).AddParkingBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingAPI_AddParkingBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingAPIServer).AddParkingBooking(ctx, req.(*AddParkingBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingAPI_GetParkingBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingAPIServer).GetParkingBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingAPI_GetParkingBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingAPIServer).GetParkingBooking(ctx, req.(*GetParkingBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingAPI_GetParkingBookingsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingBookingsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingAPIServer).GetParkingBookingsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingAPI_GetParkingBookingsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingAPIServer).GetParkingBookingsList(ctx, req.(*GetParkingBookingsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingAPI_ServiceDesc is the grpc.ServiceDesc for BookingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BookingAPI",
	HandlerType: (*BookingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddParkingBooking",
			Handler:    _BookingAPI_AddParkingBooking_Handler,
		},
		{
			MethodName: "GetParkingBooking",
			Handler:    _BookingAPI_GetParkingBooking_Handler,
		},
		{
			MethodName: "GetParkingBookingsList",
			Handler:    _BookingAPI_GetParkingBookingsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking.proto",
}
