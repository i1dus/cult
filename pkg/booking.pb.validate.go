// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: booking.proto

package parking_lot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ParkingBooking with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParkingBooking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParkingBooking with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParkingBookingMultiError,
// or nil if none found.
func (m *ParkingBooking) ValidateAll() error {
	return m.validate(true)
}

func (m *ParkingBooking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLot

	// no validation rules for PhoneNumber

	// no validation rules for Name

	// no validation rules for CarPlate

	if all {
		switch v := interface{}(m.GetTimeFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParkingBookingValidationError{
				field:  "TimeFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParkingBookingValidationError{
				field:  "TimeTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParkingBookingMultiError(errors)
	}

	return nil
}

// ParkingBookingMultiError is an error wrapping multiple validation errors
// returned by ParkingBooking.ValidateAll() if the designated constraints
// aren't met.
type ParkingBookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParkingBookingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParkingBookingMultiError) AllErrors() []error { return m }

// ParkingBookingValidationError is the validation error returned by
// ParkingBooking.Validate if the designated constraints aren't met.
type ParkingBookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParkingBookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParkingBookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParkingBookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParkingBookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParkingBookingValidationError) ErrorName() string { return "ParkingBookingValidationError" }

// Error satisfies the builtin error interface
func (e ParkingBookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParkingBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParkingBookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParkingBookingValidationError{}

// Validate checks the field values on AddParkingBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddParkingBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddParkingBookingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddParkingBookingRequestMultiError, or nil if none found.
func (m *AddParkingBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddParkingBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddParkingBookingRequestValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddParkingBookingRequestValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddParkingBookingRequestValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddParkingBookingRequestMultiError(errors)
	}

	return nil
}

// AddParkingBookingRequestMultiError is an error wrapping multiple validation
// errors returned by AddParkingBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type AddParkingBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddParkingBookingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddParkingBookingRequestMultiError) AllErrors() []error { return m }

// AddParkingBookingRequestValidationError is the validation error returned by
// AddParkingBookingRequest.Validate if the designated constraints aren't met.
type AddParkingBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddParkingBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddParkingBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddParkingBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddParkingBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddParkingBookingRequestValidationError) ErrorName() string {
	return "AddParkingBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddParkingBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddParkingBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddParkingBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddParkingBookingRequestValidationError{}

// Validate checks the field values on AddParkingBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddParkingBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddParkingBookingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddParkingBookingResponseMultiError, or nil if none found.
func (m *AddParkingBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddParkingBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLot

	if len(errors) > 0 {
		return AddParkingBookingResponseMultiError(errors)
	}

	return nil
}

// AddParkingBookingResponseMultiError is an error wrapping multiple validation
// errors returned by AddParkingBookingResponse.ValidateAll() if the
// designated constraints aren't met.
type AddParkingBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddParkingBookingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddParkingBookingResponseMultiError) AllErrors() []error { return m }

// AddParkingBookingResponseValidationError is the validation error returned by
// AddParkingBookingResponse.Validate if the designated constraints aren't met.
type AddParkingBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddParkingBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddParkingBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddParkingBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddParkingBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddParkingBookingResponseValidationError) ErrorName() string {
	return "AddParkingBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddParkingBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddParkingBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddParkingBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddParkingBookingResponseValidationError{}

// Validate checks the field values on GetParkingBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingBookingRequestMultiError, or nil if none found.
func (m *GetParkingBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLot

	if len(errors) > 0 {
		return GetParkingBookingRequestMultiError(errors)
	}

	return nil
}

// GetParkingBookingRequestMultiError is an error wrapping multiple validation
// errors returned by GetParkingBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetParkingBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingRequestMultiError) AllErrors() []error { return m }

// GetParkingBookingRequestValidationError is the validation error returned by
// GetParkingBookingRequest.Validate if the designated constraints aren't met.
type GetParkingBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingRequestValidationError) ErrorName() string {
	return "GetParkingBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingRequestValidationError{}

// Validate checks the field values on GetParkingBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingBookingResponseMultiError, or nil if none found.
func (m *GetParkingBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParkingBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParkingBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParkingBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParkingBookingResponseMultiError(errors)
	}

	return nil
}

// GetParkingBookingResponseMultiError is an error wrapping multiple validation
// errors returned by GetParkingBookingResponse.ValidateAll() if the
// designated constraints aren't met.
type GetParkingBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingResponseMultiError) AllErrors() []error { return m }

// GetParkingBookingResponseValidationError is the validation error returned by
// GetParkingBookingResponse.Validate if the designated constraints aren't met.
type GetParkingBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingResponseValidationError) ErrorName() string {
	return "GetParkingBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingResponseValidationError{}

// Validate checks the field values on GetParkingBookingsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingsListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingBookingsListRequestMultiError, or nil if none found.
func (m *GetParkingBookingsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filter

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetParkingBookingsListRequestMultiError(errors)
	}

	return nil
}

// GetParkingBookingsListRequestMultiError is an error wrapping multiple
// validation errors returned by GetParkingBookingsListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetParkingBookingsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingsListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingsListRequestMultiError) AllErrors() []error { return m }

// GetParkingBookingsListRequestValidationError is the validation error
// returned by GetParkingBookingsListRequest.Validate if the designated
// constraints aren't met.
type GetParkingBookingsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingsListRequestValidationError) ErrorName() string {
	return "GetParkingBookingsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingsListRequestValidationError{}

// Validate checks the field values on GetParkingBookingsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingsListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingBookingsListResponseMultiError, or nil if none found.
func (m *GetParkingBookingsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetParkingBookingsListResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetParkingBookingsListResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetParkingBookingsListResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetParkingBookingsListResponseMultiError(errors)
	}

	return nil
}

// GetParkingBookingsListResponseMultiError is an error wrapping multiple
// validation errors returned by GetParkingBookingsListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetParkingBookingsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingsListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingsListResponseMultiError) AllErrors() []error { return m }

// GetParkingBookingsListResponseValidationError is the validation error
// returned by GetParkingBookingsListResponse.Validate if the designated
// constraints aren't met.
type GetParkingBookingsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingsListResponseValidationError) ErrorName() string {
	return "GetParkingBookingsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingsListResponseValidationError{}
