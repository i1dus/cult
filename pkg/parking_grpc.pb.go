// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: parking.proto

package parking_lot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParkingAPI_GetParkingLot_FullMethodName          = "/api.ParkingAPI/GetParkingLot"
	ParkingAPI_GetParkingLotsByUserID_FullMethodName = "/api.ParkingAPI/GetParkingLotsByUserID"
	ParkingAPI_ListParkingLots_FullMethodName        = "/api.ParkingAPI/ListParkingLots"
	ParkingAPI_AddParkingBooking_FullMethodName      = "/api.ParkingAPI/AddParkingBooking"
	ParkingAPI_EditParkingBooking_FullMethodName     = "/api.ParkingAPI/EditParkingBooking"
	ParkingAPI_GetParkingBooking_FullMethodName      = "/api.ParkingAPI/GetParkingBooking"
	ParkingAPI_GetParkingBookingsList_FullMethodName = "/api.ParkingAPI/GetParkingBookingsList"
	ParkingAPI_Register_FullMethodName               = "/api.ParkingAPI/Register"
	ParkingAPI_Login_FullMethodName                  = "/api.ParkingAPI/Login"
	ParkingAPI_GetUserByID_FullMethodName            = "/api.ParkingAPI/GetUserByID"
	ParkingAPI_GetUserByPhoneNumber_FullMethodName   = "/api.ParkingAPI/GetUserByPhoneNumber"
	ParkingAPI_UpdateUser_FullMethodName             = "/api.ParkingAPI/UpdateUser"
	ParkingAPI_UpdateParkingLot_FullMethodName       = "/api.ParkingAPI/UpdateParkingLot"
	ParkingAPI_AddRental_FullMethodName              = "/api.ParkingAPI/AddRental"
	ParkingAPI_GetMyParkingLots_FullMethodName       = "/api.ParkingAPI/GetMyParkingLots"
)

// ParkingAPIClient is the client API for ParkingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingAPIClient interface {
	// Получение парковочного места по его числу
	GetParkingLot(ctx context.Context, in *GetParkingLotRequest, opts ...grpc.CallOption) (*GetParkingLotResponse, error)
	// Получение парковочного места по client id (owner id)
	GetParkingLotsByUserID(ctx context.Context, in *GetParkingLotsByUserIDRequest, opts ...grpc.CallOption) (*GetParkingLotsByUserIDResponse, error)
	// Получение всех парковочных мест для отрисовки карты
	ListParkingLots(ctx context.Context, in *ListParkingLotsRequest, opts ...grpc.CallOption) (*ListParkingLotsResponse, error)
	AddParkingBooking(ctx context.Context, in *AddParkingBookingRequest, opts ...grpc.CallOption) (*AddParkingBookingResponse, error)
	EditParkingBooking(ctx context.Context, in *EditParkingBookingRequest, opts ...grpc.CallOption) (*EditParkingBookingResponse, error)
	GetParkingBooking(ctx context.Context, in *GetParkingBookingRequest, opts ...grpc.CallOption) (*GetParkingBookingResponse, error)
	GetParkingBookingsList(ctx context.Context, in *GetParkingBookingsListRequest, opts ...grpc.CallOption) (*GetParkingBookingsListResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	GetUserByPhoneNumber(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	UpdateParkingLot(ctx context.Context, in *UpdateParkingLotRequest, opts ...grpc.CallOption) (*UpdateParkingLotResponse, error)
	AddRental(ctx context.Context, in *AddRentalRequest, opts ...grpc.CallOption) (*AddRentalResponse, error)
	GetMyParkingLots(ctx context.Context, in *GetMyParkingLotsRequest, opts ...grpc.CallOption) (*GetMyParkingLotsResponse, error)
}

type parkingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingAPIClient(cc grpc.ClientConnInterface) ParkingAPIClient {
	return &parkingAPIClient{cc}
}

func (c *parkingAPIClient) GetParkingLot(ctx context.Context, in *GetParkingLotRequest, opts ...grpc.CallOption) (*GetParkingLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingLotResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetParkingLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetParkingLotsByUserID(ctx context.Context, in *GetParkingLotsByUserIDRequest, opts ...grpc.CallOption) (*GetParkingLotsByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingLotsByUserIDResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetParkingLotsByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) ListParkingLots(ctx context.Context, in *ListParkingLotsRequest, opts ...grpc.CallOption) (*ListParkingLotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListParkingLotsResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_ListParkingLots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) AddParkingBooking(ctx context.Context, in *AddParkingBookingRequest, opts ...grpc.CallOption) (*AddParkingBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddParkingBookingResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_AddParkingBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) EditParkingBooking(ctx context.Context, in *EditParkingBookingRequest, opts ...grpc.CallOption) (*EditParkingBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditParkingBookingResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_EditParkingBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetParkingBooking(ctx context.Context, in *GetParkingBookingRequest, opts ...grpc.CallOption) (*GetParkingBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingBookingResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetParkingBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetParkingBookingsList(ctx context.Context, in *GetParkingBookingsListRequest, opts ...grpc.CallOption) (*GetParkingBookingsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParkingBookingsListResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetParkingBookingsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetUserByPhoneNumber(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByPhoneNumberResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetUserByPhoneNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) UpdateParkingLot(ctx context.Context, in *UpdateParkingLotRequest, opts ...grpc.CallOption) (*UpdateParkingLotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateParkingLotResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_UpdateParkingLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) AddRental(ctx context.Context, in *AddRentalRequest, opts ...grpc.CallOption) (*AddRentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRentalResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_AddRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingAPIClient) GetMyParkingLots(ctx context.Context, in *GetMyParkingLotsRequest, opts ...grpc.CallOption) (*GetMyParkingLotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyParkingLotsResponse)
	err := c.cc.Invoke(ctx, ParkingAPI_GetMyParkingLots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingAPIServer is the server API for ParkingAPI service.
// All implementations must embed UnimplementedParkingAPIServer
// for forward compatibility.
type ParkingAPIServer interface {
	// Получение парковочного места по его числу
	GetParkingLot(context.Context, *GetParkingLotRequest) (*GetParkingLotResponse, error)
	// Получение парковочного места по client id (owner id)
	GetParkingLotsByUserID(context.Context, *GetParkingLotsByUserIDRequest) (*GetParkingLotsByUserIDResponse, error)
	// Получение всех парковочных мест для отрисовки карты
	ListParkingLots(context.Context, *ListParkingLotsRequest) (*ListParkingLotsResponse, error)
	AddParkingBooking(context.Context, *AddParkingBookingRequest) (*AddParkingBookingResponse, error)
	EditParkingBooking(context.Context, *EditParkingBookingRequest) (*EditParkingBookingResponse, error)
	GetParkingBooking(context.Context, *GetParkingBookingRequest) (*GetParkingBookingResponse, error)
	GetParkingBookingsList(context.Context, *GetParkingBookingsListRequest) (*GetParkingBookingsListResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	GetUserByPhoneNumber(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UpdateParkingLot(context.Context, *UpdateParkingLotRequest) (*UpdateParkingLotResponse, error)
	AddRental(context.Context, *AddRentalRequest) (*AddRentalResponse, error)
	GetMyParkingLots(context.Context, *GetMyParkingLotsRequest) (*GetMyParkingLotsResponse, error)
	mustEmbedUnimplementedParkingAPIServer()
}

// UnimplementedParkingAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParkingAPIServer struct{}

func (UnimplementedParkingAPIServer) GetParkingLot(context.Context, *GetParkingLotRequest) (*GetParkingLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingLot not implemented")
}
func (UnimplementedParkingAPIServer) GetParkingLotsByUserID(context.Context, *GetParkingLotsByUserIDRequest) (*GetParkingLotsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingLotsByUserID not implemented")
}
func (UnimplementedParkingAPIServer) ListParkingLots(context.Context, *ListParkingLotsRequest) (*ListParkingLotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParkingLots not implemented")
}
func (UnimplementedParkingAPIServer) AddParkingBooking(context.Context, *AddParkingBookingRequest) (*AddParkingBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParkingBooking not implemented")
}
func (UnimplementedParkingAPIServer) EditParkingBooking(context.Context, *EditParkingBookingRequest) (*EditParkingBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditParkingBooking not implemented")
}
func (UnimplementedParkingAPIServer) GetParkingBooking(context.Context, *GetParkingBookingRequest) (*GetParkingBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingBooking not implemented")
}
func (UnimplementedParkingAPIServer) GetParkingBookingsList(context.Context, *GetParkingBookingsListRequest) (*GetParkingBookingsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingBookingsList not implemented")
}
func (UnimplementedParkingAPIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedParkingAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedParkingAPIServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedParkingAPIServer) GetUserByPhoneNumber(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhoneNumber not implemented")
}
func (UnimplementedParkingAPIServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedParkingAPIServer) UpdateParkingLot(context.Context, *UpdateParkingLotRequest) (*UpdateParkingLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkingLot not implemented")
}
func (UnimplementedParkingAPIServer) AddRental(context.Context, *AddRentalRequest) (*AddRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRental not implemented")
}
func (UnimplementedParkingAPIServer) GetMyParkingLots(context.Context, *GetMyParkingLotsRequest) (*GetMyParkingLotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyParkingLots not implemented")
}
func (UnimplementedParkingAPIServer) mustEmbedUnimplementedParkingAPIServer() {}
func (UnimplementedParkingAPIServer) testEmbeddedByValue()                    {}

// UnsafeParkingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingAPIServer will
// result in compilation errors.
type UnsafeParkingAPIServer interface {
	mustEmbedUnimplementedParkingAPIServer()
}

func RegisterParkingAPIServer(s grpc.ServiceRegistrar, srv ParkingAPIServer) {
	// If the following call pancis, it indicates UnimplementedParkingAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParkingAPI_ServiceDesc, srv)
}

func _ParkingAPI_GetParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetParkingLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetParkingLot(ctx, req.(*GetParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetParkingLotsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingLotsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetParkingLotsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetParkingLotsByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetParkingLotsByUserID(ctx, req.(*GetParkingLotsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_ListParkingLots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParkingLotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).ListParkingLots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_ListParkingLots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).ListParkingLots(ctx, req.(*ListParkingLotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_AddParkingBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParkingBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).AddParkingBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_AddParkingBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).AddParkingBooking(ctx, req.(*AddParkingBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_EditParkingBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditParkingBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).EditParkingBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_EditParkingBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).EditParkingBooking(ctx, req.(*EditParkingBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetParkingBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetParkingBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetParkingBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetParkingBooking(ctx, req.(*GetParkingBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetParkingBookingsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingBookingsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetParkingBookingsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetParkingBookingsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetParkingBookingsList(ctx, req.(*GetParkingBookingsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetUserByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetUserByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetUserByPhoneNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetUserByPhoneNumber(ctx, req.(*GetUserByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_UpdateParkingLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParkingLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).UpdateParkingLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_UpdateParkingLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).UpdateParkingLot(ctx, req.(*UpdateParkingLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_AddRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).AddRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_AddRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).AddRental(ctx, req.(*AddRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingAPI_GetMyParkingLots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyParkingLotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingAPIServer).GetMyParkingLots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingAPI_GetMyParkingLots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingAPIServer).GetMyParkingLots(ctx, req.(*GetMyParkingLotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingAPI_ServiceDesc is the grpc.ServiceDesc for ParkingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ParkingAPI",
	HandlerType: (*ParkingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParkingLot",
			Handler:    _ParkingAPI_GetParkingLot_Handler,
		},
		{
			MethodName: "GetParkingLotsByUserID",
			Handler:    _ParkingAPI_GetParkingLotsByUserID_Handler,
		},
		{
			MethodName: "ListParkingLots",
			Handler:    _ParkingAPI_ListParkingLots_Handler,
		},
		{
			MethodName: "AddParkingBooking",
			Handler:    _ParkingAPI_AddParkingBooking_Handler,
		},
		{
			MethodName: "EditParkingBooking",
			Handler:    _ParkingAPI_EditParkingBooking_Handler,
		},
		{
			MethodName: "GetParkingBooking",
			Handler:    _ParkingAPI_GetParkingBooking_Handler,
		},
		{
			MethodName: "GetParkingBookingsList",
			Handler:    _ParkingAPI_GetParkingBookingsList_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ParkingAPI_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ParkingAPI_Login_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _ParkingAPI_GetUserByID_Handler,
		},
		{
			MethodName: "GetUserByPhoneNumber",
			Handler:    _ParkingAPI_GetUserByPhoneNumber_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ParkingAPI_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateParkingLot",
			Handler:    _ParkingAPI_UpdateParkingLot_Handler,
		},
		{
			MethodName: "AddRental",
			Handler:    _ParkingAPI_AddRental_Handler,
		},
		{
			MethodName: "GetMyParkingLots",
			Handler:    _ParkingAPI_GetMyParkingLots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parking.proto",
}

const (
	PaymentAPI_CreatePayment_FullMethodName     = "/api.PaymentAPI/CreatePayment"
	PaymentAPI_GetPaymentStatus_FullMethodName  = "/api.PaymentAPI/GetPaymentStatus"
	PaymentAPI_PaymentCallback_FullMethodName   = "/api.PaymentAPI/PaymentCallback"
	PaymentAPI_GetPaymentHistory_FullMethodName = "/api.PaymentAPI/GetPaymentHistory"
	PaymentAPI_RefundPayment_FullMethodName     = "/api.PaymentAPI/RefundPayment"
)

// PaymentAPIClient is the client API for PaymentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentAPIClient interface {
	// Create a payment for a booking
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	// Get payment status
	GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error)
	// Process payment callback from payment provider
	PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error)
	// Get payment history for user
	GetPaymentHistory(ctx context.Context, in *GetPaymentHistoryRequest, opts ...grpc.CallOption) (*GetPaymentHistoryResponse, error)
	// Refund payment
	RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
}

type paymentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentAPIClient(cc grpc.ClientConnInterface) PaymentAPIClient {
	return &paymentAPIClient{cc}
}

func (c *paymentAPIClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentAPI_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIClient) GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentStatusResponse)
	err := c.cc.Invoke(ctx, PaymentAPI_GetPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIClient) PaymentCallback(ctx context.Context, in *PaymentCallbackRequest, opts ...grpc.CallOption) (*PaymentCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentCallbackResponse)
	err := c.cc.Invoke(ctx, PaymentAPI_PaymentCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIClient) GetPaymentHistory(ctx context.Context, in *GetPaymentHistoryRequest, opts ...grpc.CallOption) (*GetPaymentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentHistoryResponse)
	err := c.cc.Invoke(ctx, PaymentAPI_GetPaymentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentAPIClient) RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentAPI_RefundPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentAPIServer is the server API for PaymentAPI service.
// All implementations must embed UnimplementedPaymentAPIServer
// for forward compatibility.
type PaymentAPIServer interface {
	// Create a payment for a booking
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	// Get payment status
	GetPaymentStatus(context.Context, *GetPaymentStatusRequest) (*GetPaymentStatusResponse, error)
	// Process payment callback from payment provider
	PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error)
	// Get payment history for user
	GetPaymentHistory(context.Context, *GetPaymentHistoryRequest) (*GetPaymentHistoryResponse, error)
	// Refund payment
	RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error)
	mustEmbedUnimplementedPaymentAPIServer()
}

// UnimplementedPaymentAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentAPIServer struct{}

func (UnimplementedPaymentAPIServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentAPIServer) GetPaymentStatus(context.Context, *GetPaymentStatusRequest) (*GetPaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatus not implemented")
}
func (UnimplementedPaymentAPIServer) PaymentCallback(context.Context, *PaymentCallbackRequest) (*PaymentCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentCallback not implemented")
}
func (UnimplementedPaymentAPIServer) GetPaymentHistory(context.Context, *GetPaymentHistoryRequest) (*GetPaymentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentHistory not implemented")
}
func (UnimplementedPaymentAPIServer) RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedPaymentAPIServer) mustEmbedUnimplementedPaymentAPIServer() {}
func (UnimplementedPaymentAPIServer) testEmbeddedByValue()                    {}

// UnsafePaymentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentAPIServer will
// result in compilation errors.
type UnsafePaymentAPIServer interface {
	mustEmbedUnimplementedPaymentAPIServer()
}

func RegisterPaymentAPIServer(s grpc.ServiceRegistrar, srv PaymentAPIServer) {
	// If the following call pancis, it indicates UnimplementedPaymentAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentAPI_ServiceDesc, srv)
}

func _PaymentAPI_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentAPI_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPI_GetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServer).GetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentAPI_GetPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServer).GetPaymentStatus(ctx, req.(*GetPaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPI_PaymentCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServer).PaymentCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentAPI_PaymentCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServer).PaymentCallback(ctx, req.(*PaymentCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPI_GetPaymentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServer).GetPaymentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentAPI_GetPaymentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServer).GetPaymentHistory(ctx, req.(*GetPaymentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentAPI_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentAPIServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentAPI_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentAPIServer).RefundPayment(ctx, req.(*RefundPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentAPI_ServiceDesc is the grpc.ServiceDesc for PaymentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PaymentAPI",
	HandlerType: (*PaymentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentAPI_CreatePayment_Handler,
		},
		{
			MethodName: "GetPaymentStatus",
			Handler:    _PaymentAPI_GetPaymentStatus_Handler,
		},
		{
			MethodName: "PaymentCallback",
			Handler:    _PaymentAPI_PaymentCallback_Handler,
		},
		{
			MethodName: "GetPaymentHistory",
			Handler:    _PaymentAPI_GetPaymentHistory_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _PaymentAPI_RefundPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parking.proto",
}
