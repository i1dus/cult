// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: parking.proto

package parking_lot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for PaymentMethod

	switch v := m.PaymentType.(type) {
	case *CreatePaymentRequest_BookingId:
		if v == nil {
			err := CreatePaymentRequestValidationError{
				field:  "PaymentType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BookingId
	case *CreatePaymentRequest_RentalId:
		if v == nil {
			err := CreatePaymentRequestValidationError{
				field:  "PaymentType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for RentalId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for PaymentUrl

	// no validation rules for Status

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on GetPaymentStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusRequestMultiError, or nil if none found.
func (m *GetPaymentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return GetPaymentStatusRequestMultiError(errors)
	}

	return nil
}

// GetPaymentStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusRequestMultiError) AllErrors() []error { return m }

// GetPaymentStatusRequestValidationError is the validation error returned by
// GetPaymentStatusRequest.Validate if the designated constraints aren't met.
type GetPaymentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusRequestValidationError) ErrorName() string {
	return "GetPaymentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusRequestValidationError{}

// Validate checks the field values on GetPaymentStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentStatusResponseMultiError, or nil if none found.
func (m *GetPaymentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetPaymentDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentStatusResponseValidationError{
					field:  "PaymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentStatusResponseValidationError{
					field:  "PaymentDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentStatusResponseValidationError{
				field:  "PaymentDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Amount

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetPaymentStatusResponseMultiError(errors)
	}

	return nil
}

// GetPaymentStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentStatusResponseMultiError) AllErrors() []error { return m }

// GetPaymentStatusResponseValidationError is the validation error returned by
// GetPaymentStatusResponse.Validate if the designated constraints aren't met.
type GetPaymentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentStatusResponseValidationError) ErrorName() string {
	return "GetPaymentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentStatusResponseValidationError{}

// Validate checks the field values on PaymentCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentCallbackRequestMultiError, or nil if none found.
func (m *PaymentCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for ExternalId

	// no validation rules for Status

	// no validation rules for Signature

	if len(errors) > 0 {
		return PaymentCallbackRequestMultiError(errors)
	}

	return nil
}

// PaymentCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by PaymentCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type PaymentCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentCallbackRequestMultiError) AllErrors() []error { return m }

// PaymentCallbackRequestValidationError is the validation error returned by
// PaymentCallbackRequest.Validate if the designated constraints aren't met.
type PaymentCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentCallbackRequestValidationError) ErrorName() string {
	return "PaymentCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentCallbackRequestValidationError{}

// Validate checks the field values on PaymentCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentCallbackResponseMultiError, or nil if none found.
func (m *PaymentCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return PaymentCallbackResponseMultiError(errors)
	}

	return nil
}

// PaymentCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by PaymentCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type PaymentCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentCallbackResponseMultiError) AllErrors() []error { return m }

// PaymentCallbackResponseValidationError is the validation error returned by
// PaymentCallbackResponse.Validate if the designated constraints aren't met.
type PaymentCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentCallbackResponseValidationError) ErrorName() string {
	return "PaymentCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentCallbackResponseValidationError{}

// Validate checks the field values on GetPaymentHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentHistoryRequestMultiError, or nil if none found.
func (m *GetPaymentHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentHistoryRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentHistoryRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentHistoryRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentHistoryRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentHistoryRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentHistoryRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetPaymentHistoryRequestMultiError(errors)
	}

	return nil
}

// GetPaymentHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentHistoryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentHistoryRequestMultiError) AllErrors() []error { return m }

// GetPaymentHistoryRequestValidationError is the validation error returned by
// GetPaymentHistoryRequest.Validate if the designated constraints aren't met.
type GetPaymentHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentHistoryRequestValidationError) ErrorName() string {
	return "GetPaymentHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentHistoryRequestValidationError{}

// Validate checks the field values on GetPaymentHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentHistoryResponseMultiError, or nil if none found.
func (m *GetPaymentHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentHistoryResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentHistoryResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentHistoryResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPaymentHistoryResponseMultiError(errors)
	}

	return nil
}

// GetPaymentHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by GetPaymentHistoryResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPaymentHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentHistoryResponseMultiError) AllErrors() []error { return m }

// GetPaymentHistoryResponseValidationError is the validation error returned by
// GetPaymentHistoryResponse.Validate if the designated constraints aren't met.
type GetPaymentHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentHistoryResponseValidationError) ErrorName() string {
	return "GetPaymentHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentHistoryResponseValidationError{}

// Validate checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentRequestMultiError, or nil if none found.
func (m *RefundPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Reason

	if len(errors) > 0 {
		return RefundPaymentRequestMultiError(errors)
	}

	return nil
}

// RefundPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentRequestMultiError) AllErrors() []error { return m }

// RefundPaymentRequestValidationError is the validation error returned by
// RefundPaymentRequest.Validate if the designated constraints aren't met.
type RefundPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentRequestValidationError) ErrorName() string {
	return "RefundPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentRequestValidationError{}

// Validate checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefundPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundPaymentResponseMultiError, or nil if none found.
func (m *RefundPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefundId

	// no validation rules for Status

	if len(errors) > 0 {
		return RefundPaymentResponseMultiError(errors)
	}

	return nil
}

// RefundPaymentResponseMultiError is an error wrapping multiple validation
// errors returned by RefundPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type RefundPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundPaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundPaymentResponseMultiError) AllErrors() []error { return m }

// RefundPaymentResponseValidationError is the validation error returned by
// RefundPaymentResponse.Validate if the designated constraints aren't met.
type RefundPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundPaymentResponseValidationError) ErrorName() string {
	return "RefundPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefundPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundPaymentResponseValidationError{}

// Validate checks the field values on PaymentHistoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentHistoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentHistoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentHistoryItemMultiError, or nil if none found.
func (m *PaymentHistoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentHistoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentHistoryItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentHistoryItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentHistoryItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentMethod

	switch v := m.PaymentType.(type) {
	case *PaymentHistoryItem_BookingId:
		if v == nil {
			err := PaymentHistoryItemValidationError{
				field:  "PaymentType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BookingId
	case *PaymentHistoryItem_RentalId:
		if v == nil {
			err := PaymentHistoryItemValidationError{
				field:  "PaymentType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for RentalId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PaymentHistoryItemMultiError(errors)
	}

	return nil
}

// PaymentHistoryItemMultiError is an error wrapping multiple validation errors
// returned by PaymentHistoryItem.ValidateAll() if the designated constraints
// aren't met.
type PaymentHistoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentHistoryItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentHistoryItemMultiError) AllErrors() []error { return m }

// PaymentHistoryItemValidationError is the validation error returned by
// PaymentHistoryItem.Validate if the designated constraints aren't met.
type PaymentHistoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentHistoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentHistoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentHistoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentHistoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentHistoryItemValidationError) ErrorName() string {
	return "PaymentHistoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentHistoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentHistoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentHistoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentHistoryItemValidationError{}

// Validate checks the field values on AddRentalRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRentalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRentalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRentalRequestMultiError, or nil if none found.
func (m *AddRentalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRentalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRental()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRentalRequestValidationError{
					field:  "Rental",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRentalRequestValidationError{
					field:  "Rental",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRental()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRentalRequestValidationError{
				field:  "Rental",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddRentalRequestMultiError(errors)
	}

	return nil
}

// AddRentalRequestMultiError is an error wrapping multiple validation errors
// returned by AddRentalRequest.ValidateAll() if the designated constraints
// aren't met.
type AddRentalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRentalRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRentalRequestMultiError) AllErrors() []error { return m }

// AddRentalRequestValidationError is the validation error returned by
// AddRentalRequest.Validate if the designated constraints aren't met.
type AddRentalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRentalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRentalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRentalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRentalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRentalRequestValidationError) ErrorName() string { return "AddRentalRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRentalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRentalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRentalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRentalRequestValidationError{}

// Validate checks the field values on AddRentalResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddRentalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRentalResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddRentalResponseMultiError, or nil if none found.
func (m *AddRentalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRentalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLotId

	if len(errors) > 0 {
		return AddRentalResponseMultiError(errors)
	}

	return nil
}

// AddRentalResponseMultiError is an error wrapping multiple validation errors
// returned by AddRentalResponse.ValidateAll() if the designated constraints
// aren't met.
type AddRentalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRentalResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRentalResponseMultiError) AllErrors() []error { return m }

// AddRentalResponseValidationError is the validation error returned by
// AddRentalResponse.Validate if the designated constraints aren't met.
type AddRentalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRentalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRentalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRentalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRentalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRentalResponseValidationError) ErrorName() string {
	return "AddRentalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRentalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRentalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRentalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRentalResponseValidationError{}

// Validate checks the field values on GetMyParkingLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyParkingLotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyParkingLotsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyParkingLotsRequestMultiError, or nil if none found.
func (m *GetMyParkingLotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyParkingLotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyParkingLotsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyParkingLotsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyParkingLotsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyParkingLotsRequestMultiError(errors)
	}

	return nil
}

// GetMyParkingLotsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyParkingLotsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyParkingLotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyParkingLotsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyParkingLotsRequestMultiError) AllErrors() []error { return m }

// GetMyParkingLotsRequestValidationError is the validation error returned by
// GetMyParkingLotsRequest.Validate if the designated constraints aren't met.
type GetMyParkingLotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyParkingLotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyParkingLotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyParkingLotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyParkingLotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyParkingLotsRequestValidationError) ErrorName() string {
	return "GetMyParkingLotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyParkingLotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyParkingLotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyParkingLotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyParkingLotsRequestValidationError{}

// Validate checks the field values on GetMyParkingLotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyParkingLotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyParkingLotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyParkingLotsResponseMultiError, or nil if none found.
func (m *GetMyParkingLotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyParkingLotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyParkingLotsResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRentals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("Rentals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("Rentals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyParkingLotsResponseValidationError{
					field:  fmt.Sprintf("Rentals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetParkingLots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyParkingLotsResponseValidationError{
					field:  fmt.Sprintf("ParkingLots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetMyParkingLotsResponseMultiError(errors)
	}

	return nil
}

// GetMyParkingLotsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyParkingLotsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyParkingLotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyParkingLotsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyParkingLotsResponseMultiError) AllErrors() []error { return m }

// GetMyParkingLotsResponseValidationError is the validation error returned by
// GetMyParkingLotsResponse.Validate if the designated constraints aren't met.
type GetMyParkingLotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyParkingLotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyParkingLotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyParkingLotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyParkingLotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyParkingLotsResponseValidationError) ErrorName() string {
	return "GetMyParkingLotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyParkingLotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyParkingLotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyParkingLotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyParkingLotsResponseValidationError{}

// Validate checks the field values on GetUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIDRequestMultiError, or nil if none found.
func (m *GetUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserByIDRequestMultiError(errors)
	}

	return nil
}

// GetUserByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIDRequestMultiError) AllErrors() []error { return m }

// GetUserByIDRequestValidationError is the validation error returned by
// GetUserByIDRequest.Validate if the designated constraints aren't met.
type GetUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDRequestValidationError) ErrorName() string {
	return "GetUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDRequestValidationError{}

// Validate checks the field values on GetUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByIDResponseMultiError, or nil if none found.
func (m *GetUserByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByIDResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByIDResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByIDResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByIDResponseMultiError(errors)
	}

	return nil
}

// GetUserByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByIDResponseMultiError) AllErrors() []error { return m }

// GetUserByIDResponseValidationError is the validation error returned by
// GetUserByIDResponse.Validate if the designated constraints aren't met.
type GetUserByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDResponseValidationError) ErrorName() string {
	return "GetUserByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDResponseValidationError{}

// Validate checks the field values on GetUserByPhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByPhoneNumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByPhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByPhoneNumberRequestMultiError, or nil if none found.
func (m *GetUserByPhoneNumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByPhoneNumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return GetUserByPhoneNumberRequestMultiError(errors)
	}

	return nil
}

// GetUserByPhoneNumberRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserByPhoneNumberRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserByPhoneNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByPhoneNumberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByPhoneNumberRequestMultiError) AllErrors() []error { return m }

// GetUserByPhoneNumberRequestValidationError is the validation error returned
// by GetUserByPhoneNumberRequest.Validate if the designated constraints
// aren't met.
type GetUserByPhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByPhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByPhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByPhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByPhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByPhoneNumberRequestValidationError) ErrorName() string {
	return "GetUserByPhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByPhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByPhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByPhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByPhoneNumberRequestValidationError{}

// Validate checks the field values on GetUserByPhoneNumberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByPhoneNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByPhoneNumberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByPhoneNumberResponseMultiError, or nil if none found.
func (m *GetUserByPhoneNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByPhoneNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserByPhoneNumberResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserByPhoneNumberResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByPhoneNumberResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserByPhoneNumberResponseMultiError(errors)
	}

	return nil
}

// GetUserByPhoneNumberResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserByPhoneNumberResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserByPhoneNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByPhoneNumberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByPhoneNumberResponseMultiError) AllErrors() []error { return m }

// GetUserByPhoneNumberResponseValidationError is the validation error returned
// by GetUserByPhoneNumberResponse.Validate if the designated constraints
// aren't met.
type GetUserByPhoneNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByPhoneNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByPhoneNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByPhoneNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByPhoneNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByPhoneNumberResponseValidationError) ErrorName() string {
	return "GetUserByPhoneNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByPhoneNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByPhoneNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByPhoneNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByPhoneNumberResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for UserID

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on IsAdminRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsAdminRequestMultiError,
// or nil if none found.
func (m *IsAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return IsAdminRequestMultiError(errors)
	}

	return nil
}

// IsAdminRequestMultiError is an error wrapping multiple validation errors
// returned by IsAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type IsAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminRequestMultiError) AllErrors() []error { return m }

// IsAdminRequestValidationError is the validation error returned by
// IsAdminRequest.Validate if the designated constraints aren't met.
type IsAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminRequestValidationError) ErrorName() string { return "IsAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e IsAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminRequestValidationError{}

// Validate checks the field values on IsAdminResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IsAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAdminResponseMultiError, or nil if none found.
func (m *IsAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return IsAdminResponseMultiError(errors)
	}

	return nil
}

// IsAdminResponseMultiError is an error wrapping multiple validation errors
// returned by IsAdminResponse.ValidateAll() if the designated constraints
// aren't met.
type IsAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAdminResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAdminResponseMultiError) AllErrors() []error { return m }

// IsAdminResponseValidationError is the validation error returned by
// IsAdminResponse.Validate if the designated constraints aren't met.
type IsAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAdminResponseValidationError) ErrorName() string { return "IsAdminResponseValidationError" }

// Error satisfies the builtin error interface
func (e IsAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAdminResponseValidationError{}

// Validate checks the field values on GetParkingLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingLotRequestMultiError, or nil if none found.
func (m *GetParkingLotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetParkingLotRequestMultiError(errors)
	}

	return nil
}

// GetParkingLotRequestMultiError is an error wrapping multiple validation
// errors returned by GetParkingLotRequest.ValidateAll() if the designated
// constraints aren't met.
type GetParkingLotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotRequestMultiError) AllErrors() []error { return m }

// GetParkingLotRequestValidationError is the validation error returned by
// GetParkingLotRequest.Validate if the designated constraints aren't met.
type GetParkingLotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotRequestValidationError) ErrorName() string {
	return "GetParkingLotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotRequestValidationError{}

// Validate checks the field values on GetParkingLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingLotResponseMultiError, or nil if none found.
func (m *GetParkingLotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParkingLot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParkingLotResponseValidationError{
					field:  "ParkingLot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParkingLotResponseValidationError{
					field:  "ParkingLot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParkingLot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParkingLotResponseValidationError{
				field:  "ParkingLot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParkingLotResponseMultiError(errors)
	}

	return nil
}

// GetParkingLotResponseMultiError is an error wrapping multiple validation
// errors returned by GetParkingLotResponse.ValidateAll() if the designated
// constraints aren't met.
type GetParkingLotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotResponseMultiError) AllErrors() []error { return m }

// GetParkingLotResponseValidationError is the validation error returned by
// GetParkingLotResponse.Validate if the designated constraints aren't met.
type GetParkingLotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotResponseValidationError) ErrorName() string {
	return "GetParkingLotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotResponseValidationError{}

// Validate checks the field values on GetParkingLotsByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotsByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotsByUserIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingLotsByUserIDRequestMultiError, or nil if none found.
func (m *GetParkingLotsByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotsByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetParkingLotsByUserIDRequestMultiError(errors)
	}

	return nil
}

// GetParkingLotsByUserIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetParkingLotsByUserIDRequest.ValidateAll()
// if the designated constraints aren't met.
type GetParkingLotsByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotsByUserIDRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotsByUserIDRequestMultiError) AllErrors() []error { return m }

// GetParkingLotsByUserIDRequestValidationError is the validation error
// returned by GetParkingLotsByUserIDRequest.Validate if the designated
// constraints aren't met.
type GetParkingLotsByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotsByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotsByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotsByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotsByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotsByUserIDRequestValidationError) ErrorName() string {
	return "GetParkingLotsByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotsByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotsByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotsByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotsByUserIDRequestValidationError{}

// Validate checks the field values on GetParkingLotsByUserIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingLotsByUserIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingLotsByUserIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingLotsByUserIDResponseMultiError, or nil if none found.
func (m *GetParkingLotsByUserIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingLotsByUserIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParkingLot() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetParkingLotsByUserIDResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetParkingLotsByUserIDResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetParkingLotsByUserIDResponseValidationError{
					field:  fmt.Sprintf("ParkingLot[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetParkingLotsByUserIDResponseMultiError(errors)
	}

	return nil
}

// GetParkingLotsByUserIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetParkingLotsByUserIDResponse.ValidateAll()
// if the designated constraints aren't met.
type GetParkingLotsByUserIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingLotsByUserIDResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingLotsByUserIDResponseMultiError) AllErrors() []error { return m }

// GetParkingLotsByUserIDResponseValidationError is the validation error
// returned by GetParkingLotsByUserIDResponse.Validate if the designated
// constraints aren't met.
type GetParkingLotsByUserIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingLotsByUserIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingLotsByUserIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingLotsByUserIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingLotsByUserIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingLotsByUserIDResponseValidationError) ErrorName() string {
	return "GetParkingLotsByUserIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingLotsByUserIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingLotsByUserIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingLotsByUserIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingLotsByUserIDResponseValidationError{}

// Validate checks the field values on ListParkingLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParkingLotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParkingLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParkingLotsRequestMultiError, or nil if none found.
func (m *ListParkingLotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParkingLotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListParkingLotsRequestMultiError(errors)
	}

	return nil
}

// ListParkingLotsRequestMultiError is an error wrapping multiple validation
// errors returned by ListParkingLotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListParkingLotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParkingLotsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParkingLotsRequestMultiError) AllErrors() []error { return m }

// ListParkingLotsRequestValidationError is the validation error returned by
// ListParkingLotsRequest.Validate if the designated constraints aren't met.
type ListParkingLotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParkingLotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParkingLotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParkingLotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParkingLotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParkingLotsRequestValidationError) ErrorName() string {
	return "ListParkingLotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListParkingLotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParkingLotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParkingLotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParkingLotsRequestValidationError{}

// Validate checks the field values on ListParkingLotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParkingLotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParkingLotsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParkingLotsResponseMultiError, or nil if none found.
func (m *ListParkingLotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParkingLotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParkingLot() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListParkingLotsResponseValidationError{
						field:  fmt.Sprintf("ParkingLot[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListParkingLotsResponseValidationError{
					field:  fmt.Sprintf("ParkingLot[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListParkingLotsResponseMultiError(errors)
	}

	return nil
}

// ListParkingLotsResponseMultiError is an error wrapping multiple validation
// errors returned by ListParkingLotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListParkingLotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParkingLotsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParkingLotsResponseMultiError) AllErrors() []error { return m }

// ListParkingLotsResponseValidationError is the validation error returned by
// ListParkingLotsResponse.Validate if the designated constraints aren't met.
type ListParkingLotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParkingLotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParkingLotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParkingLotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParkingLotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParkingLotsResponseValidationError) ErrorName() string {
	return "ListParkingLotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListParkingLotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParkingLotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParkingLotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParkingLotsResponseValidationError{}

// Validate checks the field values on ParkingLot with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParkingLot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParkingLot with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParkingLotMultiError, or
// nil if none found.
func (m *ParkingLot) ValidateAll() error {
	return m.validate(true)
}

func (m *ParkingLot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Kind

	// no validation rules for Type

	// no validation rules for Status

	if m.Vehicle != nil {
		// no validation rules for Vehicle
	}

	if m.OwnerId != nil {
		// no validation rules for OwnerId
	}

	if len(errors) > 0 {
		return ParkingLotMultiError(errors)
	}

	return nil
}

// ParkingLotMultiError is an error wrapping multiple validation errors
// returned by ParkingLot.ValidateAll() if the designated constraints aren't met.
type ParkingLotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParkingLotMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParkingLotMultiError) AllErrors() []error { return m }

// ParkingLotValidationError is the validation error returned by
// ParkingLot.Validate if the designated constraints aren't met.
type ParkingLotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParkingLotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParkingLotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParkingLotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParkingLotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParkingLotValidationError) ErrorName() string { return "ParkingLotValidationError" }

// Error satisfies the builtin error interface
func (e ParkingLotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParkingLot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParkingLotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParkingLotValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PhoneNumber

	// no validation rules for UserType

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Surname != nil {
		// no validation rules for Surname
	}

	if m.Patronymic != nil {
		// no validation rules for Patronymic
	}

	if m.Address != nil {
		// no validation rules for Address
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vehicle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VehicleMultiError, or nil if none found.
func (m *Vehicle) ValidateAll() error {
	return m.validate(true)
}

func (m *Vehicle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Number

	// no validation rules for UserId

	if len(errors) > 0 {
		return VehicleMultiError(errors)
	}

	return nil
}

// VehicleMultiError is an error wrapping multiple validation errors returned
// by Vehicle.ValidateAll() if the designated constraints aren't met.
type VehicleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VehicleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VehicleMultiError) AllErrors() []error { return m }

// VehicleValidationError is the validation error returned by Vehicle.Validate
// if the designated constraints aren't met.
type VehicleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VehicleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VehicleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VehicleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VehicleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VehicleValidationError) ErrorName() string { return "VehicleValidationError" }

// Error satisfies the builtin error interface
func (e VehicleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVehicle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VehicleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VehicleValidationError{}

// Validate checks the field values on ParkingBooking with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParkingBooking) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParkingBooking with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParkingBookingMultiError,
// or nil if none found.
func (m *ParkingBooking) ValidateAll() error {
	return m.validate(true)
}

func (m *ParkingBooking) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ParkingLot

	// no validation rules for Vehicle

	if all {
		switch v := interface{}(m.GetTimeFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParkingBookingValidationError{
				field:  "TimeFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParkingBookingValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParkingBookingValidationError{
				field:  "TimeTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParkingBookingMultiError(errors)
	}

	return nil
}

// ParkingBookingMultiError is an error wrapping multiple validation errors
// returned by ParkingBooking.ValidateAll() if the designated constraints
// aren't met.
type ParkingBookingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParkingBookingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParkingBookingMultiError) AllErrors() []error { return m }

// ParkingBookingValidationError is the validation error returned by
// ParkingBooking.Validate if the designated constraints aren't met.
type ParkingBookingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParkingBookingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParkingBookingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParkingBookingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParkingBookingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParkingBookingValidationError) ErrorName() string { return "ParkingBookingValidationError" }

// Error satisfies the builtin error interface
func (e ParkingBookingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParkingBooking.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParkingBookingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParkingBookingValidationError{}

// Validate checks the field values on AddParkingBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddParkingBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddParkingBookingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddParkingBookingRequestMultiError, or nil if none found.
func (m *AddParkingBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddParkingBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddParkingBookingRequestValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddParkingBookingRequestValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddParkingBookingRequestValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddParkingBookingRequestMultiError(errors)
	}

	return nil
}

// AddParkingBookingRequestMultiError is an error wrapping multiple validation
// errors returned by AddParkingBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type AddParkingBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddParkingBookingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddParkingBookingRequestMultiError) AllErrors() []error { return m }

// AddParkingBookingRequestValidationError is the validation error returned by
// AddParkingBookingRequest.Validate if the designated constraints aren't met.
type AddParkingBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddParkingBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddParkingBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddParkingBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddParkingBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddParkingBookingRequestValidationError) ErrorName() string {
	return "AddParkingBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddParkingBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddParkingBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddParkingBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddParkingBookingRequestValidationError{}

// Validate checks the field values on AddParkingBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddParkingBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddParkingBookingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddParkingBookingResponseMultiError, or nil if none found.
func (m *AddParkingBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddParkingBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLot

	if len(errors) > 0 {
		return AddParkingBookingResponseMultiError(errors)
	}

	return nil
}

// AddParkingBookingResponseMultiError is an error wrapping multiple validation
// errors returned by AddParkingBookingResponse.ValidateAll() if the
// designated constraints aren't met.
type AddParkingBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddParkingBookingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddParkingBookingResponseMultiError) AllErrors() []error { return m }

// AddParkingBookingResponseValidationError is the validation error returned by
// AddParkingBookingResponse.Validate if the designated constraints aren't met.
type AddParkingBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddParkingBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddParkingBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddParkingBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddParkingBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddParkingBookingResponseValidationError) ErrorName() string {
	return "AddParkingBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddParkingBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddParkingBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddParkingBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddParkingBookingResponseValidationError{}

// Validate checks the field values on GetParkingBookingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingBookingRequestMultiError, or nil if none found.
func (m *GetParkingBookingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParkingLot

	if len(errors) > 0 {
		return GetParkingBookingRequestMultiError(errors)
	}

	return nil
}

// GetParkingBookingRequestMultiError is an error wrapping multiple validation
// errors returned by GetParkingBookingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetParkingBookingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingRequestMultiError) AllErrors() []error { return m }

// GetParkingBookingRequestValidationError is the validation error returned by
// GetParkingBookingRequest.Validate if the designated constraints aren't met.
type GetParkingBookingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingRequestValidationError) ErrorName() string {
	return "GetParkingBookingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingRequestValidationError{}

// Validate checks the field values on GetParkingBookingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParkingBookingResponseMultiError, or nil if none found.
func (m *GetParkingBookingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBooking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParkingBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParkingBookingResponseValidationError{
					field:  "Booking",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBooking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParkingBookingResponseValidationError{
				field:  "Booking",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetParkingBookingResponseMultiError(errors)
	}

	return nil
}

// GetParkingBookingResponseMultiError is an error wrapping multiple validation
// errors returned by GetParkingBookingResponse.ValidateAll() if the
// designated constraints aren't met.
type GetParkingBookingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingResponseMultiError) AllErrors() []error { return m }

// GetParkingBookingResponseValidationError is the validation error returned by
// GetParkingBookingResponse.Validate if the designated constraints aren't met.
type GetParkingBookingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingResponseValidationError) ErrorName() string {
	return "GetParkingBookingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingResponseValidationError{}

// Validate checks the field values on GetParkingBookingsListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingsListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingBookingsListRequestMultiError, or nil if none found.
func (m *GetParkingBookingsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetParkingBookingsListRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetParkingBookingsListRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetParkingBookingsListRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	if len(errors) > 0 {
		return GetParkingBookingsListRequestMultiError(errors)
	}

	return nil
}

// GetParkingBookingsListRequestMultiError is an error wrapping multiple
// validation errors returned by GetParkingBookingsListRequest.ValidateAll()
// if the designated constraints aren't met.
type GetParkingBookingsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingsListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingsListRequestMultiError) AllErrors() []error { return m }

// GetParkingBookingsListRequestValidationError is the validation error
// returned by GetParkingBookingsListRequest.Validate if the designated
// constraints aren't met.
type GetParkingBookingsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingsListRequestValidationError) ErrorName() string {
	return "GetParkingBookingsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingsListRequestValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	if all {
		switch v := interface{}(m.GetTimeFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterValidationError{
				field:  "TimeFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterValidationError{
				field:  "TimeTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on GetParkingBookingsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParkingBookingsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParkingBookingsListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetParkingBookingsListResponseMultiError, or nil if none found.
func (m *GetParkingBookingsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParkingBookingsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBookings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetParkingBookingsListResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetParkingBookingsListResponseValidationError{
						field:  fmt.Sprintf("Bookings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetParkingBookingsListResponseValidationError{
					field:  fmt.Sprintf("Bookings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetParkingBookingsListResponseMultiError(errors)
	}

	return nil
}

// GetParkingBookingsListResponseMultiError is an error wrapping multiple
// validation errors returned by GetParkingBookingsListResponse.ValidateAll()
// if the designated constraints aren't met.
type GetParkingBookingsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParkingBookingsListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParkingBookingsListResponseMultiError) AllErrors() []error { return m }

// GetParkingBookingsListResponseValidationError is the validation error
// returned by GetParkingBookingsListResponse.Validate if the designated
// constraints aren't met.
type GetParkingBookingsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParkingBookingsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParkingBookingsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParkingBookingsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParkingBookingsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParkingBookingsListResponseValidationError) ErrorName() string {
	return "GetParkingBookingsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParkingBookingsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParkingBookingsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParkingBookingsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParkingBookingsListResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Surname != nil {
		// no validation rules for Surname
	}

	if m.Patronymic != nil {
		// no validation rules for Patronymic
	}

	if m.PhoneNumber != nil {
		// no validation rules for PhoneNumber
	}

	if m.Address != nil {
		// no validation rules for Address
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UpdateParkingLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateParkingLotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateParkingLotRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateParkingLotRequestMultiError, or nil if none found.
func (m *UpdateParkingLotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateParkingLotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if m.Kind != nil {
		// no validation rules for Kind
	}

	if m.OwnerId != nil {
		// no validation rules for OwnerId
	}

	if m.OwnerVehicle != nil {
		// no validation rules for OwnerVehicle
	}

	if len(errors) > 0 {
		return UpdateParkingLotRequestMultiError(errors)
	}

	return nil
}

// UpdateParkingLotRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateParkingLotRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateParkingLotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateParkingLotRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateParkingLotRequestMultiError) AllErrors() []error { return m }

// UpdateParkingLotRequestValidationError is the validation error returned by
// UpdateParkingLotRequest.Validate if the designated constraints aren't met.
type UpdateParkingLotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateParkingLotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateParkingLotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateParkingLotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateParkingLotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateParkingLotRequestValidationError) ErrorName() string {
	return "UpdateParkingLotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateParkingLotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateParkingLotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateParkingLotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateParkingLotRequestValidationError{}

// Validate checks the field values on UpdateParkingLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateParkingLotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateParkingLotResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateParkingLotResponseMultiError, or nil if none found.
func (m *UpdateParkingLotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateParkingLotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateParkingLotResponseMultiError(errors)
	}

	return nil
}

// UpdateParkingLotResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateParkingLotResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateParkingLotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateParkingLotResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateParkingLotResponseMultiError) AllErrors() []error { return m }

// UpdateParkingLotResponseValidationError is the validation error returned by
// UpdateParkingLotResponse.Validate if the designated constraints aren't met.
type UpdateParkingLotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateParkingLotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateParkingLotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateParkingLotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateParkingLotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateParkingLotResponseValidationError) ErrorName() string {
	return "UpdateParkingLotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateParkingLotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateParkingLotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateParkingLotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateParkingLotResponseValidationError{}

// Validate checks the field values on Rental with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rental) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rental with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RentalMultiError, or nil if none found.
func (m *Rental) ValidateAll() error {
	return m.validate(true)
}

func (m *Rental) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RentalId

	// no validation rules for ParkingLot

	if all {
		switch v := interface{}(m.GetTimeFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RentalValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RentalValidationError{
					field:  "TimeFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RentalValidationError{
				field:  "TimeFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RentalValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RentalValidationError{
					field:  "TimeTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RentalValidationError{
				field:  "TimeTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CostPerHour

	// no validation rules for CostPerDay

	if len(errors) > 0 {
		return RentalMultiError(errors)
	}

	return nil
}

// RentalMultiError is an error wrapping multiple validation errors returned by
// Rental.ValidateAll() if the designated constraints aren't met.
type RentalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RentalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RentalMultiError) AllErrors() []error { return m }

// RentalValidationError is the validation error returned by Rental.Validate if
// the designated constraints aren't met.
type RentalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RentalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RentalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RentalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RentalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RentalValidationError) ErrorName() string { return "RentalValidationError" }

// Error satisfies the builtin error interface
func (e RentalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRental.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RentalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RentalValidationError{}
